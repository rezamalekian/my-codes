# -*- coding: utf-8 -*-
"""tumor4class.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JPXBKIEx74xmXKzVYE2a1Dvrh-zItXf3
"""

from google.colab import drive
drive.mount('/content/drive')

!cp -r '/content/drive/My Drive/data/' '/content/data/'

import os
import shutil
import numpy as np
from sklearn.model_selection import train_test_split

data_dir = '/content/drive/My Drive/data'
glioma_tumor_dir = os.path.join(data_dir, 'glioma_tumor')
meningioma_tumor_dir = os.path.join(data_dir, 'meningioma_tumor')
no_tumor_dir = os.path.join(data_dir, 'no_tumor')
pituitary_tumor_dir = os.path.join(data_dir, 'pituitary_tumor')

base_dir = '/content/drive/My Drive/data'
train_dir = os.path.join(base_dir, 'train')
test_dir = os.path.join(base_dir, 'test')

os.makedirs(os.path.join(train_dir, 'glioma_tumor'), exist_ok=True)
os.makedirs(os.path.join(train_dir, 'meningioma_tumor'), exist_ok=True)
os.makedirs(os.path.join(test_dir, 'glioma_tumor'), exist_ok=True)
os.makedirs(os.path.join(test_dir, 'meningioma_tumor'), exist_ok=True)
os.makedirs(os.path.join(train_dir, 'no_tumor'), exist_ok=True)
os.makedirs(os.path.join(train_dir, 'pituitary_tumor'), exist_ok=True)
os.makedirs(os.path.join(test_dir, 'no_tumor'), exist_ok=True)
os.makedirs(os.path.join(test_dir, 'pituitary_tumor'), exist_ok=True)

glioma_tumor_images = [os.path.join(glioma_tumor_dir, f) for f in os.listdir(glioma_tumor_dir) if os.path.isfile(os.path.join(glioma_tumor_dir, f))]
meningioma_tumor_images = [os.path.join(meningioma_tumor_dir, f) for f in os.listdir(meningioma_tumor_dir) if os.path.isfile(os.path.join(meningioma_tumor_dir, f))]
no_tumor_images = [os.path.join(no_tumor_dir, f) for f in os.listdir(no_tumor_dir) if os.path.isfile(os.path.join(no_tumor_dir, f))]
pituitary_tumor_images = [os.path.join(pituitary_tumor_dir, f) for f in os.listdir(pituitary_tumor_dir) if os.path.isfile(os.path.join(pituitary_tumor_dir, f))]

glioma_tumor_train, glioma_tumor_test = train_test_split(glioma_tumor_images, test_size=0.2)
meningioma_tumor_train, meningioma_tumor_test = train_test_split(meningioma_tumor_images, test_size=0.2)
no_tumor_train, no_tumor_test = train_test_split(no_tumor_images, test_size=0.2)
pituitary_tumor_train, pituitary_tumor_test = train_test_split(pituitary_tumor_images, test_size=0.2)

for file in glioma_tumor_train:
    shutil.copy(file, os.path.join(train_dir, 'glioma_tumor'))

for file in meningioma_tumor_train:
    shutil.copy(file, os.path.join(train_dir, 'meningioma_tumor'))
for file in no_tumor_train:
    shutil.copy(file, os.path.join(train_dir, 'no_tumor'))

for file in pituitary_tumor_train:
    shutil.copy(file, os.path.join(train_dir, 'pituitary_tumor'))

import shutil

for file in glioma_tumor_test:
    shutil.copy(file, os.path.join(test_dir, 'glioma_tumor'))

for file in meningioma_tumor_test:
    shutil.copy(file, os.path.join(test_dir, 'meningioma_tumor'))

for file in no_tumor_test:
    shutil.copy(file, os.path.join(test_dir, 'no_tumor'))

for file in pituitary_tumor_test:
    shutil.copy(file, os.path.join(test_dir, 'pituitary_tumor'))

from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(
    rescale=1./255,            
    rotation_range=40,         
    width_shift_range=0.2,     
    height_shift_range=0.2,    
    shear_range=0.2,           
    zoom_range=0.2,            
    horizontal_flip=True,      
    fill_mode='nearest'         
)

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_dir,                
    target_size=(224, 224),   
    batch_size=16,            
    class_mode='categorical'        
)

test_generator = test_datagen.flow_from_directory(
    test_dir,                 
    target_size=(224, 224),   
    batch_size=16,            
    class_mode='categorical'       
)

import tensorflow as tf

base_model = tf.keras.applications.Xception(
    include_top=False,  
    weights='imagenet', 
    input_shape=(224, 224, 3)  
)
x = base_model.output
x = tf.keras.layers.GlobalAveragePooling2D()(x)
x = tf.keras.layers.Dropout(0.2)(x)
x = tf.keras.layers.Dense(256, activation='relu')(x)
x = tf.keras.layers.Dropout(0.2)(x)
predictions = tf.keras.layers.Dense(4, activation='sigmoid')(x)

model = tf.keras.Model(inputs=base_model.input, outputs=predictions)

for layer in base_model.layers:
    layer.trainable = False

model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

print(f"Number of samples in train_generator: {train_generator.samples}")
print(f"Number of samples in test_generator: {test_generator.samples}")

history = model.fit(
    train_generator,
    validation_data=test_generator,
    epochs=30
)

plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Training and Validation Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Training and Validation Loss')
plt.legend()

plt.show()